// WARNING: Do NOT edit the input and output ports in this file in a text
// editor if you plan to continue editing the block that represents it in
// the Block Editor! File corruption is VERY likely to occur.

// Copyright (C) 2022  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions
// and other software and tools, and any partner logic
// functions, and any output files from any of the foregoing
// (including device programming or simulation files), and any
// associated documentation or information are expressly subject
// to the terms and conditions of the Intel Program License
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.


// Generated by Quartus Prime Version 21.1 (Build Build 850 06/23/2022)
// Created on Thu Sep 29 18:11:22 2022

//  Module Declaration
module seven_seg_decoder
(
	// {{ALTERA_ARGS_BEGIN}} DO NOT REMOVE THIS LINE!
	X3, X2, X1, X0, A, B, C, D, E, F, G
	// {{ALTERA_ARGS_END}} DO NOT REMOVE THIS LINE!
);
// Port Declaration

	// {{ALTERA_IO_BEGIN}} DO NOT REMOVE THIS LINE!
	input X3;
	input X2;
	input X1;
	input X0;
	output A;
	output B;
	output C;
	output D;
	output E;
	output F;
	output G;
	// {{ALTERA_IO_END}} DO NOT REMOVE THIS LINE!

	assign A = (~X0 & ~X1 & X2 & ~X3) | (X0 & ~X1 & ~X2 & ~X3) | (X0 & ~X1 & X2 & X3) | (X0 & X1 & ~X2 & X3);
	assign B = (X0 & ~X1 & X2 & ~X3) | (~X0 & X2 & X3) | (X1 & X2 & X3) | (X0 & X1 & X3) | (~X0 & X1 & X2);
	assign C = (~X0 & X1 & ~X2 & ~X3) | (X1 & X2 & X3) | (~X0 & X2 & X3);
	assign D = (X0 & ~X1 & ~X2 & ~X3) | (~X0 & ~X1 & X2 & ~X3) | (~X0 & X1 & ~X2 & X3) | (X0 & X1 & X2);
	assign E = (X0 & ~X3) | (X0 & ~X1 & ~X2) | (~X1 & X2 & ~X3);
	assign F = (X0 & ~X2 & ~X3) | (X1 & ~X2 & ~X3) | (X0 & X1 & ~X3) | (X0 & ~X1 & X2 & X3);
	assign G = (~X1 & ~X2 & ~X3) | (X0 & X1 & X2 & ~X3) | (~X0 & ~X1 & X2 & X3);

endmodule
